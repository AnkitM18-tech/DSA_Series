class complex {
	private:
		int a, b;
	public:
		void setData(int x, int y) {
			a=x; b=y;
		}
		void showData() {
			cout << "a" << a << " b " << b;
		}
		Complex operator +(Complex c) {
			Complex temp;
			temp.a = a + c.a ;
			temp.b = b + c.b ;
			return temp;
		}
};

void main() {
	Complex c1,c2,c3,c4;
	c1.setData(3,4);
	c2.setData(5,6);
	c3 = c1 + c2; --> c1.operator+(c2) --> same
	c4 = c1.operator-() / -c1;
}

Operators that are present in C++, only those can be overwritten by Operator overloading.

When an operator is overloaded with multiple jobs, it is known as operator overloading.
It is a way to implement compile time polymorphism.

Any symbol can be used as function name -->
	--> If it is a valid operator in C , if it is preceded by operator keyword.
	--> can not overload sizeof and ?: operator.
	
unary operator definition -->
Complex operator-() {
	Complex temp;
	temp.a = -a;
	temp.b = -b;
	return temp;
}

In binary operator the left one is the caller object --> c3=c1+c2; --> "c1"
unary operator behaviour remains same in operator overloading as in C++ --> -c1

Integer operator++() { --> pre increment. will be applicable for both pre/post increment if post increment is not defined.
	Integer i;
	i.x = ++x;
	return i;
}

Integer operator++(int) { --> applicable for post increment. int is only for differentiating between pre and post increment.
	Integer i;
	i.x = x++;
	return i;
}


void main() {
	Integer i1,i2;
	i2 = ++i1; // i2 = i1.operator++()
}

Same for decrement operator.
